version: '3.8'

# Insane AI Security - Complete Docker Compose Stack
# Production-ready configuration with monitoring, scaling, and security

services:
  # Redis - Primary data store and message broker
  redis:
    image: redis:7-alpine
    container_name: insane-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - insane-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # API Gateway - Main backend service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: insane-ai-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-insane-ai-secret-key}
      - API_KEY=${API_KEY:-insane-ai-api-key}
      - CORS_ORIGINS=https://app.insane.ai,https://api.insane.ai
      - LOG_LEVEL=INFO
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - insane-ai-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Scheduler Service - Event processing orchestration
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: insane-ai-scheduler
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - SCHEDULER_INTERVAL=30
      - ENABLE_AUTOTHROTTLE=true
      - NUM_GPUS=${NUM_GPUS:-1}
    volumes:
      - scheduler_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "services.scheduler"]
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insane-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Deep Worker V2 - ML processing workers
  deep-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - WORKER_ID=${HOSTNAME:-worker}
      - BATCH_SIZE=5
      - MAX_BATCH_WAIT_TIME=10
    volumes:
      - worker_logs:/app/logs
      - worker_temp:/app/tmp
    depends_on:
      redis:
        condition: service_healthy
      scheduler:
        condition: service_healthy
    command: ["python", "-m", "services.deep_worker_v2"]
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insane-ai-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: insane-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insane-ai-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: insane-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insane-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Exporter - Redis metrics for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: insane-ai-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - insane-ai-network

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: insane-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insane-ai-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:1.5.3
    container_name: insane-ai-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 2 * * *  # Daily at 2 AM
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - insane-ai-network

# Development override
  # Development API with hot reload
  api-dev:
    profiles: ["development"]
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: insane-ai-api-dev
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DEBUG=true
    volumes:
      - ./backend:/app:rw
      - dev_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - insane-ai-network

# Networks
networks:
  insane-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_data:
    driver: local
  scheduler_logs:
    driver: local
  worker_logs:
    driver: local
  worker_temp:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  dev_logs:
    driver: local

# Secrets (for production)
secrets:
  jwt_secret:
    external: true
  api_key:
    external: true
  grafana_password:
    external: true
